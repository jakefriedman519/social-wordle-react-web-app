import { useState, useEffect } from "react";

// TODO this was generated by v0, we need to clean this up and make it work properly ...
export default function WordleGame() {
  const getRandomWord = () => {
    // TODO get from backend
    const words = ["APPLE"];
    return words[Math.floor(Math.random() * words.length)];
  };

  const [targetWord, setTargetWord] = useState("");
  const [guesses, setGuesses] = useState<string[]>([]);
  const [currentGuess, setCurrentGuess] = useState("");
  const [gameOver, setGameOver] = useState(false);

  useEffect(() => {
    setTargetWord(getRandomWord());
  }, []);

  const handleKeyPress = (key: string) => {
    if (gameOver) return;

    if (key === "ENTER") {
      if (currentGuess.length === 5) {
        const newGuesses = [...guesses, currentGuess];
        setGuesses(newGuesses);
        setCurrentGuess("");

        if (currentGuess === targetWord || newGuesses.length === 6) {
          setGameOver(true);
        }
      }
    } else if (key === "BACKSPACE") {
      setCurrentGuess(currentGuess.slice(0, -1));
    } else if (currentGuess.length < 5) {
      setCurrentGuess(currentGuess + key);
    }
  };

  const resetGame = () => {
    setTargetWord(getRandomWord());
    setGuesses([]);
    setCurrentGuess("");
    setGameOver(false);
  };

  const getLetterColor = (
    letter: string,
    index: number,
    guessIndex: number
  ) => {
    if (guessIndex >= guesses.length) return "bg-light";
    if (letter === targetWord[index]) return "bg-success text-white";
    if (targetWord.includes(letter)) return "bg-warning text-dark";
    return "bg-secondary text-white";
  };

  const getKeyColor = (key: string) => {
    const flatGuesses = guesses.join("");
    if (targetWord.includes(key) && flatGuesses.includes(key)) {
      return "btn-outline-warning";
    }
    if (
      guesses.some((guess) =>
        guess
          .split("")
          .some((letter, i) => letter === key && targetWord[i] === key)
      )
    ) {
      return "btn-outline-success";
    }
    if (flatGuesses.includes(key)) {
      return "btn-outline-secondary";
    }
    return "btn-outline-dark";
  };

  return (
    <div className="container-fluid min-vh-100 d-flex flex-column justify-content-center align-items-center bg-light py-5">
      <h1 className="display-4 fw-bold mb-5">Wordle Clone</h1>

      {/* Guess Grid */}
      <div className="mb-4">
        {[...Array(6)].map((_, rowIndex) => (
          <div key={rowIndex} className="d-flex mb-2">
            {[...Array(5)].map((_, colIndex) => {
              const letter =
                (guesses[rowIndex] || currentGuess)[colIndex] || "";
              return (
                <div
                  key={colIndex}
                  className={`border border-dark rounded me-2 ${getLetterColor(
                    letter,
                    colIndex,
                    rowIndex
                  )} d-flex justify-content-center align-items-center`}
                  style={{ width: "3rem", height: "3rem" }}
                >
                  <span className="fs-4 fw-bold">{letter.toUpperCase()}</span>
                </div>
              );
            })}
          </div>
        ))}
      </div>

      {/* Keyboard */}
      <div className="mb-4">
        {[
          ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
          ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
          ["ENTER", "Z", "X", "C", "V", "B", "N", "M", "BACKSPACE"],
        ].map((row, rowIndex) => (
          <div key={rowIndex} className="d-flex justify-content-center mb-2">
            {row.map((key) => (
              <button
                key={key}
                onClick={() => handleKeyPress(key)}
                className={`btn ${getKeyColor(key)} me-1 ${
                  key.length > 1 ? "px-2 py-1 fs-6" : "px-3 py-2"
                }`}
              >
                {key === "BACKSPACE" ? "‚Üê" : key}
              </button>
            ))}
          </div>
        ))}
      </div>

      {/* Game Over Message */}
      {gameOver && (
        <div className="text-center">
          <p className="fs-4 fw-bold mb-2">
            {guesses.includes(targetWord) ? "You won!" : "Game Over"}
          </p>
          <p className="mb-3">The word was: {targetWord}</p>
          <button className="btn btn-primary" onClick={resetGame}>
            Play Again
          </button>
        </div>
      )}
    </div>
  );
}
